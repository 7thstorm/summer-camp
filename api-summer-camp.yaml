---
openapi: 3.0.2
info:
  title: Summer Camp
  version: '0.9'
  license:
    name: GNU General Public License v3.0 or later
    url: https://github.com/public-park/summer-camp/LICENSE
  contact:
    name: Summer Camp
    url: https://github.com/public-park/summer-camp
servers:
  - url: https://<your-domain>.com
paths:
  /login:
    post:
      description: login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: OK
          $ref: '#/components/responses/LoginResponse'
        '400':
          description: the server did not understand the request
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        5XX:
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'
  /register:
    post:
      description: register a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: OK
          $ref: '#/components/responses/RegisterResponse'
        '400':
          description: the server did not understand the request
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        5XX:
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'
  /validate-token:
    post:
      description: validate a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: OK
          $ref: '#/components/responses/ValidateTokenResponse'
        '400':
          description: the server did not understand the request
          $ref: '#/components/responses/BadRequest'
        5XX:
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'
  /users:
    post:
      security:
        - AuthenticationToken: []
      description: create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                activity:
                  $ref: '#/components/schemas/Activity'
                role:
                  $ref: '#/components/schemas/Role'
              required:
                - name
                - password
      responses:
        '200':
          description: OK
          $ref: '#/components/responses/UserResponse'
        '400':
          description: the server did not understand the request
          $ref: '#/components/responses/BadRequest'
        5XX:
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'
  /users/{userId}:
    get:
      security:
        - AuthenticationToken: []
      description: get a user by id
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          description: Bad request. User ID must be an valid UUID
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '5XX':
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'
    post:
      security:
        - AuthenticationToken: []
      description: update a user
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        description: updated user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: the updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          description: Bad request. User ID must be an valid UUID
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '5XX':
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - AuthenticationToken: []
      description: delete a user
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '204':
          description: The user was deleted
        '400':
          description: Bad request. User ID must be an valid UUID
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'
  '/users/{userid}/presence':
    get:
      security:
        - AuthenticationToken: []
      description: get the presence details of a user
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/UserPresenceResponse'
        '400':
          description: Bad request. User ID must be an valid UUID
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'
  '/users/{userid}/configuration':
    get:
      security:
        - AuthenticationToken: []
      description: get the configuration details of a user
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/UserConfigurationResponse'
        '400':
          description: Bad request. User ID must be an valid UUID
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'
  '/accounts/{accountId}':
    get:
      security:
        - AuthenticationToken: []
      description: get an accountId
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          $ref: '#/components/responses/AccountResponse'
        '400':
          description: Bad request. accountid must be an valid UUID
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'
  '/accounts/{accountId}/configuration':
    get:
      security:
        - AuthenticationToken: []
      description: get an accountId configuration
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          $ref: '#/components/schemas/AccountConfiguration'
        '400':
          description: Bad request. accountid must be an valid UUID
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'
    post:
      security:
        - AuthenticationToken: []
      description: update an accountId configuration
      parameters:
        - $ref: '#/components/parameters/accountId'
      requestBody:
        required: true
        description: updated configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountConfiguration'
      responses:
        '200':
          $ref: '#/components/responses/AccountConfigurationResponse'
        '400':
          description: Bad request. accountid must be an valid UUID
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'
  '/accounts/{accountId}/configuration/validate':
    post:
      security:
        - AuthenticationToken: []
      description: validate an accountId configuration
      parameters:
        - $ref: '#/components/parameters/accountId'
      requestBody:
        required: true
        description: configuration payload to check
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountConfiguration'
      responses:
        '200':
          $ref: '#/components/responses/AccountConfigurationResponse'
        '400':
          description: Bad request. accountid must be an valid UUID
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'
  '/accounts/{accountId}/phone-numbers':
    post:
      security:
        - AuthenticationToken: []
      description: returns available phone numbers
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: list of phone numbers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/PhoneNumber'
        '400':
          description: Bad request. accountid must be an valid UUID
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'
components:
  securitySchemes:
    AuthenticationToken:
      type: apiKey
      in: header
      name: Token
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: UUID
          readOnly: true
        name:
          type: string
          readOnly: true
        tags:
          type: array
          items:
            type: string
        activity:
          $ref: '#/components/schemas/Activity'
        accountId:
          type: string
          readOnly: true
        role:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
    UserAuthentication:
      type: object
      properties:
        provider:
          type: string
      additionalProperties: true
      readOnly: true
    UserPresence:
      type: object
      properties:
        isOnline:
          type: boolean
        isAvailable:
          type: boolean
        activity:
          $ref: '#/components/schemas/Activity'
    UserConfiguration:
      type: object
      properties:
        inbound:
          type: object
          properties:
            isEnabled:
              type: boolean
            phoneNumber:
              type: string
        outbound:
          type: object
          properties:
            isEnabled:
              type: boolean
            mode:
              type: string
              enum:
                - internal-caller-id
                - external-caller-id
    Activity:
      type: string
      enum:
        - away
        - do-not-disturb
        - waiting-for-work
    Role:
      type: string
      enum:
        - owner
        - agent
    Account:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time
    AccountConfiguration:
      type: object
      properties:
        key:
          type: string
        secret:
          type: string
          writeOnly: true
        accountSid:
          type: string
        inbound:
          type: object
          properties:
            isEnabled:
              type: boolean
            phoneNumber:
              type: string
        outbound:
          type: object
          properties:
            isEnabled:
              type: boolean
            mode:
              type: string
              enum:
                - internal-caller-id
                - external-caller-id
    PhoneNumber:
      type: object
      properties:
        phoneNumber:
          type: string
        friendlyName:
          type: string
    Error:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
  parameters:
    userId:
      in: path
      description: 'The unique identifier of the user.'
      name: userId
      required: true
      schema:
        type: string
        format: UUID
    accountId:
      in: path
      name: accountId
      description: 'The unique identifier of the account.'
      required: true
      schema:
        type: string
        format: UUID
    offset:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: The number of items to skip before starting to collect the result set.
    limit:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: The numbers of items to return.
  responses:
    NotAuthorized:
      description: The request is unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: A server error occured
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: The request was invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    AccountResponse:
      description: an account
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    AccountConfigurationResponse:
      description: an account configuration
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccountConfiguration'
    UserResponse:
      description: a user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    UserPresenceResponse:
      description: a user's presence details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserPresence'
    UserConfigurationResponse:
      description: a user's configuration details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserConfiguration'
    ValidateTokenResponse:
      description: response to a token validation request
      content:
        application/json:
          schema:
            type: object
            properties:
              isValid:
                type: boolean
    LoginResponse:
      description: response to a valid login request
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
              userId:
                type: string
              accountId:
                type: string
    RegisterResponse:
      description: response to a valid register request
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
              userId:
                type: string
